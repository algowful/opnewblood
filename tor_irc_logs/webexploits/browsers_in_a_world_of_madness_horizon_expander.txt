== Logs from alienzonexivmqro.onion #oircclass

<V> Welcome all to alienzone's class after oirc's unfortunate fall
<V> this lesson will be about expanding your horizons on what browsers can do for everyone, without much setup, in this world of madness
<V> aka for hackers
<V> I'll just be branching quickly and showing you some possibilities
<V> later lessons can be dedicated to further looking at the topics
<V> topic 1: XSS
<V> aka cross-site scripting
<V> this is when you manage to inject some code on a server that is then loaded and ran by another CLIENT
<V> unlike a PHP injection or SQLi, where you're fetching data from the server
<V> here you're making someone else run some code that may for example give you admin priviledges to a server or display whatever you want on their browser
<V> you can think about XSS in 3 steps: loading some data, having the server parse it acknowledging what changes it might make, and make it load by another client with those changes in a way that they can run it
<V> this is usually about being able to inject JS (JavaScript) that can do all sorts of things
<V> a few useful resources: https://xss-game.appspot.com, https://html5sec.org/
<V> first one is a "game" that introduces you to it as a proof of concept, second one is a list of ways you can use XSS (and other things), pretty nifty
<V> topic 2: inspecting page sources
<V> in most browsers while you're on a page, you can just press CTRL-U to see the html that you received from the server
<V> that contains all of the initial scripts that you loaded and similar, along with comments that some newcomers may leave about what the admin username is or what script do you need to run in order to get admin
<V> but you won't be very lucky. For some, this is a security issue, although if you code your page right you should never have this problem, but it's circumnavigable in a few ways, although not completely
<V> a very good example is shared.awalgarg.tk
<V> if you want to know more about how this can be useful to you, literally type "view source security" in a search engine and see what people are concerned about, then use what they fear against them
<V> topic 3: inspecting the DOM
<V> if you're inspecting a site you ALWAYS better inspect the DOM
<V> this is done in most browsers by right clicking on the page and selecting "inspect html" or "inspect element"
<V> that will also open up the dev tools, which are very useful also for other reasons
<V> now, you should see a whole lot of html popping up
<V> that is the what is currently being displayed and loaded on the screen, not the initial page source
<V> for example, one of the main purposes of JS is to move around the elements, change their content, delete or add them
* matteblack has quit (Connection closed)
<V> from here you can see everything else that happens, and can easily change things yourself
<V> just right-click one of those html elements (<element-name></element-name>) and see what options are available
<V> remember that this is just on the clientside, this will in no way affect the server, unless the js is constantly sending the server information about your dom
<V> DOM = Document Object Model
<V> which is what the html and other things represent
<V> ever been on a site that needs you to login to downlaod a file?
<V> to their services
<V> well, a lot of the times you can still see the url of the location of the file by inspecting the DOM and looking for it
<V> or ever had annoying popups? You can delete them easily
<V> or copy the contents
<V> inspecting the dom is essential if you want to make XSS code to click some things, because you need to know what they are for example
<V> or if you're making bots that need to be aware of their surroundings, you'd need to inspect the dom anyway
<V> it's an amazingly useful skill to have
<V> and ofc the web is full of resources on how to use them, remember that they're not only for hacking purposes, us web devs use them every day for legitimate purposes
* matteblack (matteblack@Alien-p5t.da0.ea61hl.IP) has joined
<V> <mxz> Can XSS affect the DOM ?
<V> answer: indeed, that's what it does most of the time
<V> since you can inject JS (and CSS), you have complete access to the DOM
<V> back to the topic: it's nice practice to see how complex or beautiful it can get by looking for example at facebook.com and slack.com, in which it's not hard to make chat bots just like anona in #antisec
<V> topic 4: using the network tab
<V> don't close the dev tools just yet, right next to the DOM tab there should be a Network tab, from which you can see all of the traffic coming and going to and from that page
<V> you may need to reload the page
<V> that contains everything from the source initial html to every websocket request you may use for a chat
<V> whatever your browser is sending, you can see it
<V> this is powerful becaues you can see what the page would normally be sending to (just a url normally, with some headers tho)
<V> and set up automated ways to exploit that by overchanging that messaging server without needing a browser
<V> or automate it with a browser if you want, pretty easy to do it in javascript using XMLHttpRequest (mdn it) without any setup really
<V> on the fly, maybe you're on time pressure
<V> the network tab also shows what made the request happen, so you can see what it is being used from in the js or anywhere else
* roit has quit (Ping timeout: 121 seconds)
<V> quick side note about mdn: the Mozilla Developer Network is an amazing place to find information about mostly anything browser related
<V> for example:  https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor
<V> that will tell you a lot ;)
<V> I reccomend going in a chat.stackoverflow.com chatroom and see how the messages leave and come to and from your browser, it should be a good start to make you see what's going on
<V> remember that every change happening over the internet has to go through that network tab
<V> nothing is lost
<V> unless your browser is rigged
<V> topic 5: SQLi
<V> Obviously I should mention it because it can mostly be done through the browser manually, although if that doesn't work you may need tools
<V> but we've already had a notes about it at alienzonexivmqro.onion/classes/sqli.txt
<V> just remember that it's somewhat similar to XSS in that you're giving the server code that will be modified and you're trying to make it run by an SQL parser
<V> and here's a quick resource that should be added: ghostbin.com/paste/ffchg/raw
<V> ofc you'll find a lot about it on the internet, there's countless resources
<V> topic 6: using the console
<V> still in the dev tools, you'll find the "JavaScript Console"
<V> that's a nice place to run any javascript, that I really reccomend you learn about for any use, not just hacking
<V> it can function as a quick impromptu calculator as well as way to run quick algorithms
<V> but you can also use it to set up bots, run specific searches through the page or anything of that sort
<V> again, check out the mdn for the console, just make sure to learn about it and be comfortable with using it
<V> on another quick divergence, you can use the console to test your "bookmark code" (see alienzonexivmqro.onion/classes/fun_with_browser_dev_tools.txt)
<V> which is again extremely useful for many many things
<V> -----------
<V> and that basically wraps it up for this quick resource lesson
<V> remember to just keep checking out resources and learn anything that sparks your interest, I just showed you various ways in which normal browser tools can be used to do quick hacking and scouting
<V> more classes on specific classes will be done at later times
<V> so, a quick "hi grandma", "hi netsec" and "hi cgan" and this is the wrap up :)